security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: bcrypt

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # On place les deux firewalls de LexikJWT avant notre firewall "main"
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        # Le firewall de notre API => Ã  adapter selon nos besoins
        api_secure:
            pattern:   ^/api/secure
            stateless: true
            jwt: ~
        
        api:
            pattern:   ^/api
            stateless: true
            jwt: ~

        main:
            lazy: true
            provider: app_user_provider

            #form_login:
                # name of the route created previously
                #login_path: login_index # GET => affiche le form
                #check_path: login_index # POST => traite le form
            
            logout:
                path: logout

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
    access_control:
        #- { path: ^/back, roles: ROLE_ADMIN }

        #- { path: ^/back/(.*)/(create|edit), roles: ROLE_ADMIN} # page edit create back-office
        #- { path: ^/back/(.*)/\d+$, roles: ROLE_ADMIN, methods: [POST]} # delete as a 'admin' back-office
        #- { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY } 

        - { path: ^/api/login_check, roles: PUBLIC_ACCESS }
        - { path: ^/api/user, roles: PUBLIC_ACCESS, methods:[POST]}
        - { path: ^/api, roles: ROLE_USER}

        #- { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        #- { path: ^/profile, roles: ROLE_USER }
        
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
 


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon